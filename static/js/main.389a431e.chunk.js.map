{"version":3,"sources":["components/Item/Item.js","components/ItemText/ItemText.js","helpers/cartHelpers.js","helpers/inventoryHelpers.js","components/Items/Items.js","components/HowManyModal/HowManyModal.js","components/Store/Store.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","handleOnClick","item","className","onClick","children","ItemText","classes","text","multiplier","price","qty","reducer","accumulator","currentValue","quantity","quantityUpdate","cart","foundItem","updatedItem","prop","map","mapUpdate","storeItems","name","Items","isCart","hasOwnProperty","type","items","handleItemClicked","renderItem","index","key","length","reduce","HowManyModal","itemClicked","buttonText","submitCallback","cancelCallback","modalType","useState","howMany","setHowMany","onSubmit","e","preventDefault","id","min","max","value","onChange","parseInt","target","handleOnChange","itemClickedReducer","currentItemClicked","action","isModalVisible","Error","Store","setCart","useReducer","dispatchItemClicked","clearItemClicked","updateCart","itemToUpdate","itemFoundInCart","find","updatedCart","addUpdate","filter","deleteUpdate","renderModal","Footer","href","rel","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.389a431e.chunk.js","sourcesContent":["import React from 'react';\nimport './Item.css';\n\nconst Item = props => {\n  const { handleOnClick, item, className } = props;\n\n  return (\n    <li className={className} onClick={() => handleOnClick(item)}>\n      {props.children}\n    </li>\n  );\n};\n\nexport default Item;","import React from 'react';\nimport './ItemText.css';\n\nconst ItemText = props => {\n  const classes = props.className ? `ItemText ${props.className}` : 'ItemText';\n  return (\n    <span className={classes}>\n      {props.text}\n    </span>\n  );\n};\n\nexport default ItemText;","export const addUpdate = (cart, foundItem, quantity, itemClicked) => {\n  return foundItem ?\n    quantityUpdate(cart, foundItem, quantity) :\n    [...cart, { ...itemClicked, quantity }];\n}\n\nexport const deleteUpdate = (cart, foundItem, quantity) => {\n  return foundItem.quantity === quantity ?\n    cart.filter(item => item.name !== foundItem.name) :\n    quantityUpdate(cart, foundItem, -quantity);\n}\n\nexport const multiplier = (price, qty) => price * qty;\n\nexport const reducer = (accumulator, currentValue) => (\n  accumulator + multiplier(currentValue.price, currentValue.quantity)\n);\n\nexport const total = (cart) => cart.reduce(reducer, 0);\n\nconst mapUpdate = (cart, updatedItem, prop) => (\n  cart.map(item => (\n    item[prop] === updatedItem[prop] ?\n      updatedItem : item\n  ))\n);\n\nconst quantityUpdate = (cart, foundItem, quantity) => {\n  const updatedItem = { ...foundItem, quantity: foundItem.quantity + quantity };\n  return mapUpdate(cart, updatedItem, 'name');\n};","const db = 'https://rpg-store-shopping-cart.firebaseio.com/inventory.json';\n\nconst postItemToDb = (db, item) => {\n  fetch(db, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(item)\n  })\n    .then(res => res.json())\n    .then(data => {\n      console.log(data)\n    })\n};\n\nexport const addItemsToStore = (db, items) => {\n  items.forEach(item => postItemToDb(db, item))\n};\n\nexport const storeItems = [\n  { name: \"Sword\", price: 100 },\n  { name: \"Shield\", price: 60 },\n  { name: \"Power Ring\", price: 250 },\n  { name: \"Bow\", price: 90 },\n  { name: \"Arrow\", price: 5 },\n  { name: \"Bomb\", price: 10 }\n];\n","import React from 'react'\nimport Item from '../Item/Item';\nimport ItemText from '../ItemText/ItemText';\n\nimport { multiplier, total } from '../../helpers/cartHelpers';\nimport { storeItems } from '../../helpers/inventoryHelpers';\n\nimport './Items.css';\n\nconst Items = props => {\n  const isCart = props.hasOwnProperty('cart');\n  const type = isCart ? 'Cart' : 'Inventory';\n  const items = isCart ? [...props.cart] : [...storeItems];\n\n  const handleOnClick = (item) => props.handleItemClicked(item);\n\n  const renderItems = () => (\n    items.map((item, index) => renderItem(item, index))\n  );\n\n  const renderItem = (item, index) => (\n    <Item key={index} item={item}\n      className={`${type}Item`} handleOnClick={handleOnClick} >\n      <ItemText text={item.name} />\n\n      {\n        isCart ? (\n          <>\n            <ItemText text={`x${item.quantity}`} />\n            <ItemText text={`${multiplier(item.price, item.quantity)}g`} />\n          </>\n        )\n          :\n          <ItemText text={`${item.price}g`} />\n      }\n\n    </Item>\n  );\n\n  const renderTotal = () => (\n    <div className=\"Cart__total\">\n      <span>TOTAL:</span>\n      <span>{items.length !== 0 ? total(items) : 0}g</span>\n    </div>\n  );\n\n  return (\n    <div className={`${type} items-container`}>\n      <h2>{type}</h2>\n      <ul className={`${type}__list`}>\n        {renderItems()}\n      </ul>\n\n      {isCart && renderTotal()}\n    </div>\n  );\n\n};\n\nexport default Items;","import React, { useState } from 'react';\nimport './HowManyModal.css';\n\nconst HowManyModal = props => {\n  const { itemClicked, buttonText, submitCallback, cancelCallback, modalType } = props;\n\n  const [howMany, setHowMany] = useState(1);\n\n  const handleOnChange = e => {\n    setHowMany(parseInt(e.target.value))\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    submitCallback(itemClicked, howMany);\n  }\n\n  const handleCancel = () => cancelCallback();\n\n  return (\n    <div className=\"HowManyModal\">\n      <form className=\"HowManyModal__form\" onSubmit={handleSubmit}>\n        <h2>How Many {itemClicked.name}s?</h2>\n        <div className=\"HowManyModal__input-container\">\n          x<input\n            type=\"number\"\n            id=\"how-many\"\n            min=\"1\"\n            max={`${modalType === 'remove' ? itemClicked.quantity : 99}`}\n            value={howMany}\n            onChange={e => handleOnChange(e)}\n          />\n        </div>\n        <div className=\"HowManyModal__buttons\">\n          <button className=\"HowManyModal__cancel-button\" onClick={handleCancel}>\n            Cancel\n          </button>\n\n          <button className=\"HowManyModal__confirm-button\">{buttonText}</button>\n        </div>\n      </form >\n    </div>\n  );\n};\n\nexport default HowManyModal;","import React, { useState, useReducer } from 'react';\nimport Items from '../Items/Items';\nimport HowManyModal from '../HowManyModal/HowManyModal';\n\nimport { addUpdate, deleteUpdate } from '../../helpers/cartHelpers';\n\nimport './Store.css';\n\nconst itemClickedReducer = (currentItemClicked, action) => {\n  switch (action.type) {\n    case 'SET':\n      return {\n        isModalVisible: true,\n        modalType: action.modalType,\n        item: action.item\n      }\n    case 'CLEAR':\n      return {\n        isModalVisible: false,\n        modalType: null,\n        item: null\n      }\n    default:\n      throw new Error('There was a problem.');\n  }\n};\n\nconst Store = props => {\n  const [cart, setCart] = useState([]);\n  const [itemClicked, dispatchItemClicked] = useReducer(itemClickedReducer, { isModalVisible: false, modalType: null, item: null });\n\n  const handleItemClicked = (item) => {\n    const modalType = item.hasOwnProperty('quantity') ? 'remove' : 'add';\n\n    dispatchItemClicked({ type: 'SET', item, modalType })\n  };\n\n  const clearItemClicked = () => dispatchItemClicked({ type: 'CLEAR' });\n\n  const updateCart = (itemToUpdate, quantity) => {\n    let itemFoundInCart = cart.find(item => item.name === itemToUpdate.name);\n\n    let updatedCart = itemClicked.modalType === 'add' ?\n      addUpdate(cart, itemFoundInCart, quantity, itemClicked.item) :\n      deleteUpdate(cart, itemFoundInCart, quantity);\n\n    setCart(updatedCart);\n    clearItemClicked();\n  };\n\n  const renderModal = () => {\n    const modalType = itemClicked.modalType;\n    const buttonText = modalType === 'add' ?\n      'Add to Cart' : 'Remove from Cart';\n\n    return (\n      <HowManyModal\n        itemClicked={itemClicked.item}\n        submitCallback={updateCart}\n        cancelCallback={clearItemClicked}\n        buttonText={buttonText}\n        modalType={itemClicked.modalType}\n      />\n    );\n  };\n\n  return (\n    <div className=\"Store\">\n      <div className=\"Store__Inventory\">\n        <Items handleItemClicked={handleItemClicked} />\n\n        {itemClicked.isModalVisible && renderModal()}\n\n        <Items\n          cart={cart}\n          handleItemClicked={handleItemClicked}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Store;","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => (\n  <footer>\n    <p>&copy;2020 <a href=\"https://robotspacefish.dev/\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Opens in new window\">robotspacefish!</a></p>\n  </footer>\n);\n\nexport default Footer;","import React from 'react';\nimport Store from './components/Store/Store';\nimport Footer from './components/Footer/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Store />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}