{"version":3,"sources":["components/ItemText/ItemText.js","components/Item/Item.js","helpers/inventoryHelpers.js","components/Inventory/Inventory.js","components/CartItem/CartItem.js","helpers/cartHelpers.js","components/Cart/Cart.js","components/HowManyModal/HowManyModal.js","components/Store/Store.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ItemText","props","classes","className","text","Item","onClick","handleOnClick","name","price","items","Inventory","item","handleItemClicked","map","index","key","CartItem","totalCost","quantity","multiplier","qty","reducer","accumulator","currentValue","quantityUpdate","cart","foundItem","updatedItem","prop","mapUpdate","Cart","length","reduce","HowManyModal","itemClicked","buttonText","submitCallback","cancelCallback","modalType","useState","howMany","setHowMany","onSubmit","e","preventDefault","type","id","min","max","value","onChange","parseInt","target","handleOnChange","itemClickedReducer","currentItemClicked","action","isModalVisible","Error","Store","setCart","useReducer","dispatchItemClicked","hasOwnProperty","clearItemClicked","updateCart","itemToUpdate","itemFoundInCart","find","updatedCart","addUpdate","filter","deleteUpdate","renderModal","Footer","href","rel","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9e776fd.chunk.js","sourcesContent":["import React from 'react';\nimport './ItemText.css';\n\nconst ItemText = props => {\n  const classes = props.className ? `ItemText ${props.className}` : 'ItemText';\n  return (\n    <span className={classes}>\n      {props.text}\n    </span>\n  );\n};\n\nexport default ItemText;","import React from 'react';\nimport ItemText from '../ItemText/ItemText';\nimport './Item.css';\n\nconst Item = props => (\n  <li className=\"Item\" onClick={() => props.handleOnClick({ name: props.name, price: props.price })}>\n    <ItemText text={props.name} />\n    <ItemText text={`${props.price}g`} />\n  </li>\n);\n\nexport default Item;","const db = 'https://rpg-store-shopping-cart.firebaseio.com/inventory.json';\n\nconst postItemToDb = (db, item) => {\n  fetch(db, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(item)\n  })\n    .then(res => res.json())\n    .then(data => {\n      console.log(data)\n    })\n};\n\nexport const addItemsToStore = (db, items) => {\n  items.forEach(item => postItemToDb(db, item))\n};\n\nexport const items = [\n  { name: \"Sword\", price: 100 },\n  { name: \"Shield\", price: 60 },\n  { name: \"Power Ring\", price: 250 },\n  { name: \"Bow\", price: 90 },\n  { name: \"Arrow\", price: 5 },\n  { name: \"Bomb\", price: 10 }\n];\n","import React from 'react';\nimport Item from '../Item/Item';\nimport { items } from '../../helpers/inventoryHelpers';\nimport './Inventory.css';\n\nconst Inventory = props => {\n  const renderItems = (items) => {\n    return items.map((item, index) => (\n      <Item\n        key={index}\n        name={item.name}\n        price={item.price}\n        handleOnClick={handleOnClick}\n      />\n    ))\n  };\n\n  const handleOnClick = (item) => {\n    props.handleItemClicked(item);\n  };\n\n  return (\n    <div className=\"Inventory items-container\">\n      <h2>Inventory</h2>\n      <ul className=\"Inventory__list\">\n        {renderItems(items)}\n      </ul>\n    </div>\n  );\n};\n\nexport default Inventory;","import React from 'react';\nimport ItemText from '../ItemText/ItemText';\nimport './CartItem.css';\n\nconst CartItem = props => {\n  const { item, handleOnClick, totalCost } = props;\n\n  const renderItemText = () => {\n    return (\n      <>\n        <ItemText text={item.name} />\n        <ItemText text={`x${item.quantity}`} />\n        <ItemText text={`${totalCost}g`} />\n      </>\n    );\n  };\n\n  return (\n    <li className=\"CartItem\" onClick={() => handleOnClick(item)}>\n      {renderItemText()}\n    </li >\n  );\n};\nexport default CartItem;","export const addUpdate = (cart, foundItem, quantity, itemClicked) => {\n  return foundItem ?\n    quantityUpdate(cart, foundItem, quantity) :\n    [...cart, { ...itemClicked, quantity }];\n}\n\nexport const deleteUpdate = (cart, foundItem, quantity) => {\n  return foundItem.quantity === quantity ?\n    cart.filter(item => item.name !== foundItem.name) :\n    quantityUpdate(cart, foundItem, -quantity);\n}\n\nexport const multiplier = (price, qty) => price * qty;\n\nexport const reducer = (accumulator, currentValue) => (\n  accumulator + multiplier(currentValue.price, currentValue.quantity)\n);\n\nexport const total = (cart) => cart.reduce(reducer, 0);\n\nconst mapUpdate = (cart, updatedItem, prop) => (\n  cart.map(item => (\n    item[prop] === updatedItem[prop] ?\n      updatedItem : item\n  ))\n);\n\nconst quantityUpdate = (cart, foundItem, quantity) => {\n  const updatedItem = { ...foundItem, quantity: foundItem.quantity + quantity };\n  return mapUpdate(cart, updatedItem, 'name');\n};","import React from 'react';\nimport CartItem from '../CartItem/CartItem';\n\nimport { multiplier, total } from '../../helpers/cartHelpers';\n\nimport './Cart.css';\n\nconst Cart = props => {\n  const handleOnClick = item => props.handleItemClicked(item);\n\n  const renderCartItems = () => (\n    props.cart.map(item => (\n      <CartItem key={item.name}\n        item={item}\n        totalCost={multiplier(item.price, item.quantity)}\n        handleOnClick={handleOnClick}\n      />\n    ))\n  );\n\n  return (\n    <div className=\"Cart items-container\">\n      <div className=\"Cart__content\">\n        <h2>Cart</h2>\n        <ul>\n          {renderCartItems()}\n        </ul>\n      </div>\n\n      <div className=\"Cart__total\">\n        <span>TOTAL:</span>\n        <span>{props.cart.length !== 0 ? total(props.cart) : 0}g</span>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Cart;","import React, { useState } from 'react';\nimport './HowManyModal.css';\n\nconst HowManyModal = props => {\n  const { itemClicked, buttonText, submitCallback, cancelCallback, modalType } = props;\n\n  const [howMany, setHowMany] = useState(1);\n\n  const handleOnChange = e => {\n    setHowMany(parseInt(e.target.value))\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    submitCallback(itemClicked, howMany);\n  }\n\n  const handleCancel = () => cancelCallback();\n\n  return (\n    <div className=\"HowManyModal\">\n      <form className=\"HowManyModal__form\" onSubmit={handleSubmit}>\n        <h2>How Many {itemClicked.name}s?</h2>\n        <div className=\"HowManyModal__input-container\">\n          x<input\n            type=\"number\"\n            id=\"how-many\"\n            min=\"1\"\n            max={`${modalType === 'remove' ? itemClicked.quantity : 99}`}\n            value={howMany}\n            onChange={e => handleOnChange(e)}\n          />\n        </div>\n        <div className=\"HowManyModal__buttons\">\n          <button className=\"HowManyModal__cancel-button\" onClick={handleCancel}>\n            Cancel\n          </button>\n\n          <button className=\"HowManyModal__confirm-button\">{buttonText}</button>\n        </div>\n      </form >\n    </div>\n  );\n};\n\nexport default HowManyModal;","import React, { useState, useReducer } from 'react';\nimport Inventory from '../Inventory/Inventory';\nimport Cart from '../Cart/Cart';\nimport HowManyModal from '../HowManyModal/HowManyModal';\n\nimport { addUpdate, deleteUpdate } from '../../helpers/cartHelpers';\n\nimport './Store.css';\n\nconst itemClickedReducer = (currentItemClicked, action) => {\n  switch (action.type) {\n    case 'SET':\n      return {\n        isModalVisible: true,\n        modalType: action.modalType,\n        item: action.item\n      }\n    case 'CLEAR':\n      return {\n        isModalVisible: false,\n        modalType: null,\n        item: null\n      }\n    default:\n      throw new Error('There was a problem.');\n  }\n};\n\nconst Store = props => {\n  const [cart, setCart] = useState([]);\n  const [itemClicked, dispatchItemClicked] = useReducer(itemClickedReducer, { isModalVisible: false, modalType: null, item: null });\n\n  const handleItemClicked = (item) => {\n    const modalType = item.hasOwnProperty('quantity') ? 'remove' : 'add';\n\n    dispatchItemClicked({ type: 'SET', item, modalType })\n  };\n\n  const clearItemClicked = () => dispatchItemClicked({ type: 'CLEAR' });\n\n  const updateCart = (itemToUpdate, quantity) => {\n    let itemFoundInCart = cart.find(item => item.name === itemToUpdate.name);\n\n    let updatedCart = itemClicked.modalType === 'add' ?\n      addUpdate(cart, itemFoundInCart, quantity, itemClicked.item) :\n      deleteUpdate(cart, itemFoundInCart, quantity);\n\n    setCart(updatedCart);\n    clearItemClicked();\n  };\n\n  const renderModal = () => {\n    const modalType = itemClicked.modalType;\n    const buttonText = modalType === 'add' ?\n      'Add to Cart' : 'Remove from Cart';\n\n    return (\n      <HowManyModal\n        itemClicked={itemClicked.item}\n        submitCallback={updateCart}\n        cancelCallback={clearItemClicked}\n        buttonText={buttonText}\n        modalType={itemClicked.modalType}\n      />\n    );\n  };\n\n  return (\n    <div className=\"Store\">\n      <div className=\"Store__Inventory\">\n        <Inventory handleItemClicked={handleItemClicked} />\n\n        {itemClicked.isModalVisible && renderModal()}\n\n        <Cart\n          cart={cart}\n          handleItemClicked={handleItemClicked}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Store;","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => (\n  <footer>\n    <p>&copy;2020 <a href=\"https://robotspacefish.dev/\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Opens in new window\">robotspacefish!</a></p>\n  </footer>\n);\n\nexport default Footer;","import React from 'react';\nimport Store from './components/Store/Store';\nimport Footer from './components/Footer/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Store />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}