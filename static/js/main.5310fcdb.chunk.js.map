{"version":3,"sources":["helpers/constants.js","components/Item/Item.js","components/ItemText/ItemText.js","helpers/cartHelpers.js","components/ItemList/ItemList.js","components/InventoryItems/InventoryItems.js","components/CartItems/CartItems.js","components/ModalButton/ModalButton.js","components/HowManyModal/HowManyModal.js","reducers/cartReducer.js","reducers/itemClickedReducer.js","components/Store/Store.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","MODAL","STORE_ITEMS","name","price","Item","item","className","dispatch","modalType","children","onClick","type","ItemText","text","updateQuantity","cart","quantity","map","i","multiplier","qty","reducer","accumulator","currentValue","ItemList","items","isCart","key","Date","now","InventoryItems","CartItems","reduce","ModalButton","handleOnClick","HowManyModal","props","itemClicked","buttonText","clearItemClicked","handleSubmitItem","useState","howMany","setHowMany","onSubmit","e","preventDefault","id","min","max","value","onChange","parseInt","target","cartReducer","action","length","find","addToCart","payload","filter","removeFromCart","itemClickedReducer","isModalVisible","Store","useReducer","dispatchCart","dispatchItemClicked","handleAddToCart","handleRemoveFromCart","removeAll","itemExists","renderModal","Footer","href","rel","title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5310fcdb.chunk.js","sourcesContent":["export const ACTIONS = {\n  SET: 'set',\n  CLEAR: 'clear',\n  ADD_TO_CART: 'add-to-cart',\n  REMOVE_FROM_CART: 'remove-from-cart',\n  UPDATE_QUANTITY: 'update-quantity'\n}\n\nexport const MODAL = {\n  ADD: 'add',\n  REMOVE: 'remove'\n}\n\nexport const STORE_ITEMS = [\n  { name: \"Sword\", price: 100 },\n  { name: \"Shield\", price: 60 },\n  { name: \"Power Ring\", price: 250 },\n  { name: \"Bow\", price: 90 },\n  { name: \"Arrow\", price: 5 },\n  { name: \"Bomb\", price: 10 }\n];\n","import React from 'react';\nimport './Item.css';\nimport { ACTIONS } from '../../helpers/constants';\n\nconst Item = ({ item, className, dispatch, modalType, children }) => {\n  return (\n    <li className={className}\n      onClick={() => (\n        dispatch({ type: ACTIONS.SET, modalType, item })\n      )}\n    >\n      {children}\n    </li>\n  )\n};\n\nexport default Item;","import React from 'react';\nimport './ItemText.css';\n\nconst ItemText = ({ text }) => (\n  <span className='ItemText'>\n    {text}\n  </span>\n);\n\nexport default ItemText;","/**\n * Remove specified item from cart\n * @param {Array} cart\n * @param {Object} item\n * @return {Array} cart without item specified\n */\nexport const removeFromCart = (cart, item) => {\n  return cart.filter(i => i.name !== item.name);\n}\n\n/**\n * Add specified quantity to existing item in cart\n * @param {Array} cart\n * @param {Object} item\n * @param {Number} quantity\n * @return {Array} cart with item with updated quantity\n */\nexport const updateQuantity = (cart, item, quantity) => (\n  cart.map(i => (\n    i.name === item.name ?\n      { ...i, quantity: i.quantity += quantity } : i\n  ))\n);\n\n/**\n * Add new item to cart or update existing item quantity\n * @param {Array} cart - cart containing 0 or more items\n * @param {Object} item\n * @param {Number} quantity\n * @return {Array} if cart is empty return new item in array\n * @return {Array} existing cart with new item added\n * @return {Array} cart with existing item quantity updated\n */\nexport const addToCart = (cart, item, quantity) => {\n  if (cart.length === 0) return [{ ...item, quantity }];\n\n  const foundItem = cart.find(i => i.name === item.name);\n  if (!foundItem) return [...cart, { ...item, quantity }];\n\n  return updateQuantity(cart, item, quantity);\n}\n\n\nexport const multiplier = (price, qty) => price * qty;\n\nexport const reducer = (accumulator, currentValue) => (\n  accumulator + multiplier(currentValue.price, currentValue.quantity)\n);\n\nexport const total = (cart) => cart.reduce(reducer, 0);","import React from 'react'\nimport Item from '../Item/Item';\nimport ItemText from '../ItemText/ItemText';\nimport { multiplier } from '../../helpers/cartHelpers';\nimport './ItemList.css';\n\nconst ItemList = ({ type, items, dispatch, modalType, isCart }) => {\n  return (\n    <ul className={`${type}__list`}>\n      {\n        items.map(item => (\n          <Item\n            key={`${Date.now()}-${type}-${item.name}`}\n            className={`${type}Item`}\n            item={item}\n            dispatch={dispatch}\n            modalType={modalType}\n          >\n            <ItemText text={item.name} />\n            {\n              isCart ?\n                (\n                  <>\n                    <ItemText text={`x${item.quantity}`} />\n                    <ItemText text={`${multiplier(item.price, item.quantity)}g`} />\n                  </>\n                )\n                :\n                <ItemText text={`${item.price}g`} />\n            }\n          </Item>\n        ))\n      }\n    </ul>\n  )\n}\n\nexport default ItemList;\n","import React from 'react'\nimport ItemList from '../ItemList/ItemList';\nimport { STORE_ITEMS } from '../../helpers/constants';\nimport { MODAL } from '../../helpers/constants';\n\nconst InventoryItems = ({ dispatch }) => {\n  return (\n    <div className=\"Inventory items-container\">\n      <h2>Inventory</h2>\n\n      <ItemList\n        type=\"Inventory\"\n        items={STORE_ITEMS}\n        dispatch={dispatch}\n        modalType={MODAL.ADD}\n      />\n    </div>\n  )\n}\n\nexport default InventoryItems;\n","import React from 'react'\nimport ItemList from '../ItemList/ItemList';\nimport { total } from '../../helpers/cartHelpers';\nimport { MODAL } from '../../helpers/constants';\n\nconst CartItems = ({ items, dispatch }) => (\n  <div className=\"Cart items-container\">\n    <h2>Cart</h2>\n\n    <ItemList\n      type=\"Cart\"\n      items={items}\n      dispatch={dispatch}\n      modalType={MODAL.REMOVE}\n      isCart\n    />\n\n    <div className=\"Cart__total\">\n      <span>TOTAL:</span>\n      <span>{total(items)}g</span>\n    </div>\n  </div>\n);\n\n\nexport default CartItems;\n","import React from 'react';\n\nconst ModalButton = ({ type, text, handleOnClick }) => (\n  <button\n    className={`HowManyModal__${type}-button`}\n    onClick={handleOnClick}\n  >\n    {text}\n  </button>\n);\n\nexport default ModalButton;","import React, { useState } from 'react';\nimport ModalButton from '../ModalButton/ModalButton';\nimport { MODAL } from '../../helpers/constants';\nimport './HowManyModal.css';\n\nconst HowManyModal = (props) => {\n  const { itemClicked, buttonText, modalType, clearItemClicked, handleSubmitItem } = props;\n\n  const [howMany, setHowMany] = useState(1);\n\n  const handleOnChange = e => setHowMany(parseInt(e.target.value));\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    handleSubmitItem(howMany);\n    clearItemClicked();\n  }\n\n  return (\n    <div className=\"HowManyModal\">\n      <form className=\"HowManyModal__form\" onSubmit={handleSubmit}>\n\n        <h2>How Many {itemClicked.name}s?</h2>\n\n        <div className=\"HowManyModal__input-container\">\n          x<input\n            type=\"number\"\n            id=\"how-many\"\n            min=\"1\"\n            max={`${modalType === MODAL.REMOVE ? itemClicked.quantity : 99}`}\n            value={howMany}\n            onChange={handleOnChange}\n          />\n        </div>\n\n        <div className=\"HowManyModal__buttons\">\n          <ModalButton type=\"cancel\" text=\"Cancel\" handleOnClick={clearItemClicked} />\n          <ModalButton type=\"confirm\" text={buttonText} />\n        </div>\n      </form >\n    </div>\n  );\n};\n\nexport default HowManyModal;","import { ACTIONS } from '../helpers/constants';\nimport { addToCart, updateQuantity, removeFromCart } from '../helpers/cartHelpers';\n\nexport default function cartReducer(cart, action) {\n\n  switch (action.type) {\n    case ACTIONS.ADD_TO_CART:\n\n      return addToCart(cart, action.payload.item, action.payload.qty)\n\n    case ACTIONS.UPDATE_QUANTITY:\n\n      return updateQuantity(cart, action.payload.item, action.payload.qty)\n\n    case ACTIONS.REMOVE_FROM_CART:\n\n      return removeFromCart(cart, action.payload.item, action.payload.qty)\n\n    default:\n\n      return cart;\n  }\n\n};\n","import { ACTIONS } from '../helpers/constants';\n\nexport default function itemClickedReducer(itemClicked, action) {\n\n  switch (action.type) {\n\n    case ACTIONS.SET:\n\n      return {\n        isModalVisible: true,\n        modalType: action.modalType,\n        item: action.item\n      };\n\n    case ACTIONS.CLEAR:\n\n      return {\n        isModalVisible: false,\n        modalType: null,\n        item: null\n      };\n\n    default:\n\n      return itemClicked;\n  }\n\n};","import React, { useReducer } from 'react';\nimport InventoryItems from '../InventoryItems/InventoryItems';\nimport CartItems from '../CartItems/CartItems';\nimport HowManyModal from '../HowManyModal/HowManyModal';\nimport cartReducer from '../../reducers/cartReducer';\nimport itemClickedReducer from '../../reducers/itemClickedReducer';\nimport { ACTIONS, MODAL } from '../../helpers/constants';\n\nimport './Store.css';\n\nconst Store = () => {\n  const [cart, dispatchCart] = useReducer(cartReducer, []);\n\n  const [itemClicked, dispatchItemClicked] = useReducer(itemClickedReducer, { isModalVisible: false, modalType: null, item: null });\n\n  const clearItemClicked = () => dispatchItemClicked({ type: ACTIONS.CLEAR });\n\n  const handleSubmitItem = (qty) => {\n    const fn = itemClicked.modalType === MODAL.ADD ?\n      handleAddToCart : handleRemoveFromCart;\n\n    fn(itemClicked.item, qty);\n  };\n\n  const handleRemoveFromCart = (item, qty) => {\n    const removeAll = item.quantity === qty;\n\n    removeAll ?\n      dispatchCart({ type: ACTIONS.REMOVE_FROM_CART, payload: { item } })\n      :\n      dispatchCart({ type: ACTIONS.UPDATE_QUANTITY, payload: { qty: -qty, item } });\n  }\n\n  const handleAddToCart = (item, qty) => {\n    const itemExists = cart.find(i => i.name === item);\n\n    const type = itemExists ? ACTIONS.UPDATE_QUANTITY : ACTIONS.ADD_TO_CART;\n\n    dispatchCart({ payload: { item, qty }, type });\n  }\n\n  const renderModal = () => {\n    const modalType = itemClicked.modalType;\n    const buttonText = modalType === MODAL.ADD ?\n      'Add to Cart' : 'Remove from Cart';\n\n    return (\n      <HowManyModal\n        modalType={itemClicked.modalType}\n        itemClicked={itemClicked.item}\n        handleAddToCart={handleAddToCart}\n        handleSubmitItem={handleSubmitItem}\n        clearItemClicked={clearItemClicked}\n        buttonText={buttonText}\n      />\n    );\n  };\n\n  return (\n    <div className=\"Store\">\n      <InventoryItems dispatch={dispatchItemClicked} />\n\n      {itemClicked.isModalVisible && renderModal()}\n\n      <CartItems items={cart} dispatch={dispatchItemClicked} />\n    </div>\n  );\n};\n\nexport default Store;","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => (\n  <footer>\n    <p>Made by <a href=\"https://robotspacefish.dev/\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Opens in new window\">robotspacefish!</a></p>\n  </footer>\n);\n\nexport default Footer;","import React from 'react';\nimport Store from './components/Store/Store';\nimport Footer from './components/Footer/Footer';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <Store />\n    <Footer />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}