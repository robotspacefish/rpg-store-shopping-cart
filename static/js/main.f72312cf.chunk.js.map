{"version":3,"sources":["components/Item/Item.js","helpers/inventoryHelpers.js","components/Inventory/Inventory.js","components/CartItem/CartItem.js","components/Cart/Cart.js","components/HowManyModal/HowManyModal.js","components/Store/Store.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","className","onClick","handleOnClick","name","price","items","Inventory","item","handleItemClicked","map","index","key","handleMouseOver","e","CartItem","onMouseOver","deleteFromCart","quantity","totalCost","multiplier","qty","reducer","accumulator","currentValue","Cart","cart","length","reduce","HowManyModal","useState","howMany","setHowMany","onSubmit","preventDefault","addToCart","itemClicked","type","id","min","value","onChange","parseInt","target","handleOnChange","cancelAddToCart","itemClickedReducer","currentItemClicked","action","isModalVisible","Error","Store","setCart","useReducer","dispatchItemClicked","clearItemClicked","itemToAdd","updatedItem","itemFoundInCart","find","updatedCart","prevCart","itemName","prevState","filter","Footer","href","rel","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f72312cf.chunk.js","sourcesContent":["import React from 'react';\nimport './Item.css';\n\nconst Item = props => (\n  <li className=\"Item\" onClick={() => props.handleOnClick({ name: props.name, price: props.price })}>\n    <span>{props.name}</span>\n    <span>{props.price}g</span>\n  </li>\n);\n\nexport default Item;","const db = 'https://rpg-store-shopping-cart.firebaseio.com/inventory.json';\n\nconst postItemToDb = (db, item) => {\n  fetch(db, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(item)\n  })\n    .then(res => res.json())\n    .then(data => {\n      console.log(data)\n    })\n};\n\nexport const addItemsToStore = (db, items) => {\n  items.forEach(item => postItemToDb(db, item))\n};\n\nexport const items = [\n  { name: \"Sword\", price: 100 },\n  { name: \"Shield\", price: 60 },\n  { name: \"Power Ring\", price: 250 },\n  { name: \"Bow\", price: 90 },\n  { name: \"Arrow\", price: 5 },\n  { name: \"Bomb\", price: 10 }\n];\n","import React from 'react';\nimport Item from '../Item/Item';\nimport { items } from '../../helpers/inventoryHelpers';\nimport './Inventory.css';\n\nconst Inventory = props => {\n  const renderItems = (items) => {\n    return items.map((item, index) => (\n      <Item\n        key={index}\n        name={item.name}\n        price={item.price}\n        handleOnClick={handleOnClick}\n      />\n    ))\n  };\n\n  const handleOnClick = (item) => {\n    props.handleItemClicked(item);\n  };\n\n  return (\n    <div className=\"Inventory items-container\">\n      <h2>Inventory</h2>\n      <ul className=\"Inventory__list\">\n        {renderItems(items)}\n      </ul>\n    </div>\n  );\n};\n\nexport default Inventory;","import React from 'react';\nimport './CartItem.css';\n\n//TODO - merge with Item later\n// For now, use this to display item name and price x quantity\n// click to delete?\n\nconst handleMouseOver = (e) => {\n  // TODO delete text\n};\n\nconst CartItem = props => (\n  <li className=\"CartItem\" onMouseOver={handleMouseOver}\n    onClick={() => props.deleteFromCart(props.name)}>\n    <span>{props.name}</span>\n    <span>{`x${props.quantity}`}</span>\n    <span>{`${props.totalCost}g`}</span>\n  </li>\n);\n\nexport default CartItem;","import React from 'react';\nimport CartItem from '../CartItem/CartItem';\nimport './Cart.css';\n\nconst multiplier = (price, qty) => price * qty;\n\nconst reducer = (accumulator, currentValue) => (\n  accumulator + multiplier(currentValue.price, currentValue.quantity)\n);\n\nconst Cart = props => {\n\n  const renderCartItems = () => (\n    props.cart.map(item => (\n      <CartItem key={item.name}\n        name={item.name}\n        quantity={item.quantity}\n        totalCost={multiplier(item.price, item.quantity)}\n        deleteFromCart={props.deleteFromCart}\n      />\n    ))\n  );\n\n  const total = () => props.cart.reduce(reducer, 0);\n\n  return (\n    <div className=\"Cart items-container\">\n      <div className=\"Cart__content\">\n        <h2>Cart</h2>\n        {renderCartItems()}\n      </div>\n\n      <div className=\"Cart__total\">\n        <span>TOTAL:</span>\n        <span>{props.cart.length !== 0 ? total() : 0}g</span>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Cart;","import React, { useState } from 'react';\nimport './HowManyModal.css';\n\nconst HowManyModal = props => {\n  const [howMany, setHowMany] = useState(1);\n\n  const handleOnChange = e => {\n    setHowMany(parseInt(e.target.value))\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    props.addToCart(props.itemClicked, howMany);\n  }\n\n  const handleCancel = () => props.cancelAddToCart();\n\n  return (\n    <div className=\"HowManyModal\">\n      <form className=\"HowManyModal__form\" onSubmit={handleSubmit}>\n        <h2>How Many {props.itemClicked.name}s?</h2>\n        <div className=\"HowManyModal__input-container\">\n          x<input\n            type=\"number\"\n            id=\"how-many\"\n            min=\"1\"\n            value={howMany}\n            onChange={e => handleOnChange(e)}\n          />\n        </div>\n        <div className=\"HowManyModal__buttons\">\n          <button className=\"HowManyModal__cancel-button\" onClick={handleCancel}>Cancel</button>\n          <button className=\"HowManyModal__confirm-button\">Add To Cart</button>\n        </div>\n      </form >\n    </div>\n  );\n};\n\nexport default HowManyModal;","import React, { useState, useReducer } from 'react';\nimport Inventory from '../Inventory/Inventory';\nimport Cart from '../Cart/Cart';\nimport HowManyModal from '../HowManyModal/HowManyModal';\nimport './Store.css';\n\nconst itemClickedReducer = (currentItemClicked, action) => {\n  switch (action.type) {\n    case 'SET':\n      return { isModalVisible: true, itemClicked: action.itemClicked }\n    case 'CLEAR':\n      return { isModalVisible: false, itemClicked: null }\n    default:\n      throw new Error('There was a problem.');\n  }\n};\n\nconst Store = props => {\n  const [cart, setCart] = useState([]);\n  const [itemClicked, dispatchItemClicked] = useReducer(itemClickedReducer, { isModalVisible: false, itemClicked: null });\n\n  const handleItemClicked = (item) => (\n    dispatchItemClicked({ type: 'SET', itemClicked: item })\n  );\n\n  const updateCart = updatedItem => (\n    cart.map(item => (\n      item.name === updatedItem.name ?\n        updatedItem : item\n    ))\n  );\n\n  const addToCart = (itemToAdd, quantity) => {\n    let itemFoundInCart = cart.find(item => item.name === itemToAdd.name);\n\n    if (!itemFoundInCart) {\n      setCart(prevCart => [...prevCart, { ...itemClicked.itemClicked, quantity }])\n    } else {\n      itemFoundInCart = { ...itemFoundInCart, quantity: itemFoundInCart.quantity + quantity }\n\n      const updatedCart = updateCart(itemFoundInCart);\n      setCart(updatedCart);\n    }\n\n    clearItemClicked();\n  };\n\n  const deleteFromCart = itemName => (\n    setCart(prevState => (\n      prevState.filter(item => item.name !== itemName)\n    ))\n  );\n\n  const clearItemClicked = () => dispatchItemClicked({ type: 'CLEAR' });\n\n  return (\n    <div className=\"Store\">\n      <div className=\"Store__Inventory\">\n        <Inventory\n          handleItemClicked={handleItemClicked}\n        />\n\n        {itemClicked.isModalVisible && <HowManyModal itemClicked={itemClicked.itemClicked} addToCart={addToCart} cancelAddToCart={clearItemClicked} />}\n        <Cart cart={cart} deleteFromCart={deleteFromCart} />\n      </div>\n    </div>\n  );\n};\n\nexport default Store;","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => (\n  <footer>\n    <p>&copy;2020 <a href=\"https://robotspacefish.dev/\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Opens in new window\">robotspacefish!</a></p>\n  </footer>\n);\n\nexport default Footer;","import React from 'react';\nimport Store from './components/Store/Store';\nimport Footer from './components/Footer/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Store />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}